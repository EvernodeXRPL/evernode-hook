/// <reference types="node" />
import { codec, encodeSeed, decodeSeed, encodeAccountID, decodeAccountID, encodeNodePublic, decodeNodePublic, encodeAccountPublic, decodeAccountPublic, isValidClassicAddress } from './xrp-codec';
declare function classicAddressToXAddress(classicAddress: string, tag: number | false, test: boolean): string;
declare function encodeXAddress(accountId: Buffer, tag: number | false, test: boolean): string;
declare function xAddressToClassicAddress(xAddress: string): {
    classicAddress: string;
    tag: number | false;
    test: boolean;
};
declare function decodeXAddress(xAddress: string): {
    accountId: Buffer;
    tag: number | false;
    test: boolean;
};
declare function isValidXAddress(xAddress: string): boolean;
export { codec, // Codec with XRP alphabet
encodeSeed, // Encode entropy as a "seed"
decodeSeed, // Decode a seed into an object with its version, type, and bytes
encodeAccountID, // Encode bytes as a classic address (r...)
decodeAccountID, // Decode a classic address to its raw bytes
encodeNodePublic, // Encode bytes to XRP Ledger node public key format
decodeNodePublic, // Decode an XRP Ledger node public key into its raw bytes
encodeAccountPublic, // Encode a public key, as for payment channels
decodeAccountPublic, // Decode a public key, as for payment channels
isValidClassicAddress, // Check whether a classic address (r...) is valid
classicAddressToXAddress, // Derive X-address from classic address, tag, and network ID
encodeXAddress, // Encode account ID, tag, and network ID to X-address
xAddressToClassicAddress, // Decode X-address to account ID, tag, and network ID
decodeXAddress, // Convert X-address to classic address, tag, and network ID
isValidXAddress };
