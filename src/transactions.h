#ifndef TRANSACTIONS_INCLUDED
#define TRANSACTIONS_INCLUDED 1

/**************************************************************************/
/*************Pre-populated templates of Payment Transactions**************/
/**************************************************************************/
// Simple IOU Payment.
uint8_t PAYMENT_TRUSTLINE[310] = {
    0x12, 0x00, 0x00,                   // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,       // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,       // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,       // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)><currency_code(20)><issuer(20)>) - Added on prepare to offset 36
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 84
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 95)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 130
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 152
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(137) - Added on prepare to offset 172
    // >> emit_details - NOTE : Considered additional 22 bytes for the callback scenario.
};

// IOU Payment with single memo (Reward).
uint8_t REWARD_PAYMENT[333] = {
    0x12, 0x00, 0x00,                   // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,       // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,       // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,       // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)><currency_code(20)><issuer(20)>) - Added on prepare to offset 36
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 84
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 95)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 130
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 152
    0xF9, 0xEA, // Memo array and object start markers
    0x7C, 0x0D,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // MemoType (13 bytes) offset 176
    0x7D, 0x00,
    0x7E, 0x00,
    0xE1, 0xF1, // Memo array and object end markers
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(138) - Added on prepare to offset 191
    // emit_details - NOTE : Considered additional 22 bytes for the callback scenario.
};

// Simple XRP Payment with single memo (Prune).
uint8_t PRUNED_HOST_REBATE_MIN_PAYMENT[329] = {
    0x12, 0x00, 0x00,                                     // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,                         // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,                         // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,                         // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)>) - Added on prepare to offset 35
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 44
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 55)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 90
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 112
    0xF9, 0xEA, // Memo array and object start markers
    0x7C, 0x13,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // MemoType (19 bytes) offset 136
    0x7D, 0x14,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // MemoData (20 bytes) offset 157
    0x7E, 0x0A,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // MemoFormat (10 bytes) offset 179
    0xE1, 0xF1,                                                 // Memo array and object end markers
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(138) - Added on prepare to offset 191
    // emit_details - NOTE : Considered additional 22 bytes for the callback scenario.
};

// IOU Payment with single memo (Prune).
uint8_t PRUNED_HOST_REBATE_PAYMENT[369] = {
    0x12, 0x00, 0x00,                   // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,       // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,       // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,       // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)><currency_code(20)><issuer(20)>) - Added on prepare to offset 36
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee - Added on prepare to offset 84
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 95)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 130
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 152
    0xF9, 0xEA, // Memo array and object start markers
    0x7C, 0x13,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // MemoType (19 bytes) offset 176
    0x7D, 0x14,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // MemoData (20 bytes) offset 197
    0x7E, 0x0A,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // MemoFormat (10 bytes) offset 219
    0xE1, 0xF1,                                                 // Memo array and object end markers
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(138) - Added on prepare to offset 231
    // emit_details - NOTE : Considered additional 22 bytes for the callback scenario.
};

/******************************************************************************/
/*************Pre-populated templates of NFT related Transactions**************/
/******************************************************************************/
// Mint NFT
uint8_t REG_NFT_MINT_TX[279] = {
    0x12, 0x00, 0x19,                                     // transaction_type(ttNFT_MINT)
    0x14, 0x00, 0x00,                                     // transfer_fee(0)
    0x22, 0x00, 0x00, 0x00, 0x01,                         // flags(tfBurnable)
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 18
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 24
    0x20, 0x2A, 0x00, 0x00, 0x00, 0x00,                   // taxon(0)
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee - Added on prepare to offset 34
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // signing pubkey(NULL)
    0x75, 0x27, 0x65, 0x76, 0x72, 0x68, 0x6F, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, // uri(length 39, evrhost<txid>) - txid Added on prepare to offset 87
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account - Added on prepare to offset 121
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit details(138 bytes) - Added on prepare to offset 141
};

// Burn NFT
uint8_t NFT_BURN_TX[284] = {
    0x12, 0x00, 0x1A,                   // transaction_type(ttNFT_BURN)
    0x22, 0x00, 0x00, 0x00, 0x00,       // flags(0)
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 15
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 21
    0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // nftokenid - Added on prepare to offset 26
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                         // fee - Added on prepare to offset 58
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // signing pubkey(NULL)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account - Added on prepare to offset 104
    0x82, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // owner - Added on prepare to offset 126
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit details(138) - Added on prepare to offset 160
};

// Offer NFT IOU
uint8_t NFT_BUY_OFFER_TRUSTLINE[338] = {
    0x12, 0x00, 0x1B,                   // transaction_type(ttNFT_OFFER)
    0x22, 0x00, 0x00, 0x00, 0x00,       // Flags (tfBuyToken)
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x2A, 0xFF, 0xFF, 0xFF, 0xFF,       // expiration_max
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 20
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 26
    0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x56, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xDA, 0xD1, 0xA1, 0x58, 0x2D, 0x0C, 0xC4, 0x8B, 0xF7, 0x63, 0xA4, 0x85, 0xB8, 0x87, 0xDD, 0x76, 0xA4, 0x4D, 0x6C, 0xB8, // amount(<type(1)><amount(8)><currency_code(20)><issuer(20)>) - Added on prepare to offset 31
    0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // NFTokenID - Added on prepare to offset 80
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                         // fee - Added on prepare to offset 112
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // signing pubkey(NULL)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // AccountID - Added on prepare to offset 158
    0x82, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // AccountID owner - Added on prepare to offset 180
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit details(138) - Added on prepare to offset 200
};

// NFT Offers (BUY/SELL)
uint8_t NFT_OFFER[298] = {
    0x12, 0x00, 0x1B,                                     // transaction_type(ttNFT_OFFER)
    0x22, 0x00, 0x00, 0x00, 0x00,                         // Flags (tfBuyToken/tfSellToken) - Added on prepare to offset 4
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x2A, 0xFF, 0xFF, 0xFF, 0xFF,                         // expiration_max
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 20
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 26
    0x61, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)>) - Added on prepare to offset 31
    0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // NFTokenID - Added on prepare to offset 40
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                         // fee - Added on prepare to offset 72
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // signing pubkey(NULL)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // AccountID - Added on prepare to offset 118
    0x82, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // AccountID owner - Added on prepare to offset 140
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit details(138) - Added on prepare to offset 160
};

#define PAYMENT_TRUSTLINE_TX_SIZE \
    sizeof(PAYMENT_TRUSTLINE)
#define PREPARE_PAYMENT_TRUSTLINE_TX(token, issuer, amount, to_address)  \
    {                                                                    \
        uint8_t *buf_out = PAYMENT_TRUSTLINE;                            \
        uint32_t cls = (uint32_t)ledger_seq();                           \
        UINT32_TO_BUF((buf_out + 25), cls + 1);                          \
        UINT32_TO_BUF((buf_out + 31), cls + 5);                          \
        SET_AMOUNT_OUT((buf_out + 36), token, issuer, amount);           \
        COPY_20BYTES((buf_out + 130), hook_accid);                       \
        COPY_20BYTES((buf_out + 152), to_address);                       \
        etxn_details((buf_out + 172), PAYMENT_TRUSTLINE_TX_SIZE);        \
        int64_t fee = etxn_fee_base(buf_out, PAYMENT_TRUSTLINE_TX_SIZE); \
        uint8_t *fee_ptr = buf_out + 84;                                 \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                    \
    }

#define REWARD_PAYMENT_TX_SIZE \
    sizeof(REWARD_PAYMENT)
#define PREPARE_REWARD_PAYMENT_TX(evr_amount, to_address)                    \
    {                                                                        \
        uint8_t *buf_out = REWARD_PAYMENT;                                   \
        uint32_t cls = (uint32_t)ledger_seq();                               \
        UINT32_TO_BUF((buf_out + 25), cls + 1);                              \
        UINT32_TO_BUF((buf_out + 31), cls + 5);                              \
        SET_AMOUNT_OUT((buf_out + 36), EVR_TOKEN, issuer_accid, evr_amount); \
        COPY_20BYTES((buf_out + 130), hook_accid);                           \
        COPY_20BYTES((buf_out + 152), to_address);                           \
        COPY_8BYTES((buf_out + 176), HOST_REWARD);                           \
        COPY_4BYTES((buf_out + 176 + 8), (HOST_REWARD + 8));                 \
        COPY_BYTE((buf_out + 176 + 12), (HOST_REWARD + 12));                 \
        etxn_details((buf_out + 195), REWARD_PAYMENT_TX_SIZE);               \
        int64_t fee = etxn_fee_base(buf_out, REWARD_PAYMENT_TX_SIZE);        \
        uint8_t *fee_ptr = buf_out + 84;                                     \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                        \
    }

#define PRUNED_HOST_REBATE_COMMON(buf_out, to_address)                \
    {                                                                 \
        COPY_20BYTES((buf_out), hook_accid);                          \
        COPY_20BYTES((buf_out + 22), to_address);                     \
        COPY_16BYTES((buf_out + 46), DEAD_HOST_PRUNE_REF);            \
        COPY_2BYTES((buf_out + 46 + 16), (DEAD_HOST_PRUNE_REF + 16)); \
        COPY_BYTE((buf_out + 46 + 18), (DEAD_HOST_PRUNE_REF + 18));   \
        COPY_20BYTES((buf_out + 67), PRUNE_MESSAGE);                  \
        COPY_8BYTES((buf_out + 89), DEAD_HOST_PRUNE_REF);             \
        COPY_2BYTES((buf_out + 89 + 8), (DEAD_HOST_PRUNE_REF + 8));   \
    }

#define PRUNED_HOST_REBATE_MIN_PAYMENT_TX_SIZE \
    sizeof(PRUNED_HOST_REBATE_MIN_PAYMENT)
#define PREPARE_PRUNED_HOST_REBATE_MIN_PAYMENT_TX(drops_amount, to_address)           \
    {                                                                                 \
        uint8_t *buf_out = PRUNED_HOST_REBATE_MIN_PAYMENT;                            \
        uint32_t cls = (uint32_t)ledger_seq();                                        \
        UINT32_TO_BUF((buf_out + 25), cls + 1);                                       \
        UINT32_TO_BUF((buf_out + 31), cls + 5);                                       \
        uint8_t *buf_ptr = (buf_out + 35);                                            \
        _06_01_ENCODE_DROPS_AMOUNT(buf_ptr, drops_amount);                            \
        PRUNED_HOST_REBATE_COMMON((buf_out + 90), to_address);                        \
        etxn_details((buf_out + 191), PRUNED_HOST_REBATE_MIN_PAYMENT_TX_SIZE);        \
        int64_t fee = etxn_fee_base(buf_out, PRUNED_HOST_REBATE_MIN_PAYMENT_TX_SIZE); \
        buf_ptr = buf_out + 44;                                                       \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(buf_ptr, fee);                                 \
    }

#define PRUNED_HOST_REBATE_PAYMENT_TX_SIZE \
    sizeof(PRUNED_HOST_REBATE_PAYMENT)
#define PREPARE_PRUNED_HOST_REBATE_PAYMENT_TX(evr_amount, to_address)             \
    {                                                                             \
        uint8_t *buf_out = PRUNED_HOST_REBATE_PAYMENT;                            \
        uint32_t cls = (uint32_t)ledger_seq();                                    \
        UINT32_TO_BUF((buf_out + 25), cls + 1);                                   \
        UINT32_TO_BUF((buf_out + 31), cls + 5);                                   \
        SET_AMOUNT_OUT((buf_out + 36), EVR_TOKEN, issuer_accid, evr_amount);      \
        PRUNED_HOST_REBATE_COMMON((buf_out + 130), to_address);                   \
        etxn_details((buf_out + 231), PRUNED_HOST_REBATE_PAYMENT_TX_SIZE);        \
        int64_t fee = etxn_fee_base(buf_out, PRUNED_HOST_REBATE_PAYMENT_TX_SIZE); \
        uint8_t *fee_ptr = buf_out + 84;                                          \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                             \
    }

#define REG_NFT_MINT_TX_SIZE \
    sizeof(REG_NFT_MINT_TX)
#define PREPARE_REG_NFT_MINT_TX(txid)                               \
    {                                                               \
        uint8_t *buf_out = REG_NFT_MINT_TX;                         \
        UINT32_TO_BUF((buf_out + 18), cur_ledger_seq + 1);          \
        UINT32_TO_BUF((buf_out + 24), cur_ledger_seq + 5);          \
        COPY_32BYTES((buf_out + 87), txid);                         \
        COPY_20BYTES((buf_out + 121), hook_accid);                  \
        etxn_details((buf_out + 141), 138);                         \
        int64_t fee = etxn_fee_base(buf_out, REG_NFT_MINT_TX_SIZE); \
        uint8_t *fee_ptr = buf_out + 34;                            \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);               \
    }

#define NFT_BURN_TX_SIZE \
    sizeof(NFT_BURN_TX)
#define PREPARE_NFT_BURN_TX(nftid, owner)                       \
    {                                                           \
        uint8_t *buf_out = NFT_BURN_TX;                         \
        UINT32_TO_BUF((buf_out + 15), cur_ledger_seq + 1);      \
        UINT32_TO_BUF((buf_out + 21), cur_ledger_seq + 5);      \
        COPY_32BYTES((buf_out + 26), nftid);                    \
        COPY_20BYTES((buf_out + 104), hook_accid);              \
        COPY_20BYTES((buf_out + 126), owner);                   \
        etxn_details((buf_out + 146), 138);                     \
        int64_t fee = etxn_fee_base(buf_out, NFT_BURN_TX_SIZE); \
        uint8_t *fee_ptr = buf_out + 58;                        \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);           \
    }

#define NFT_BUY_OFFER_TRUSTLINE_TX_SIZE \
    sizeof(NFT_BUY_OFFER_TRUSTLINE)
#define PREPARE_NFT_BUY_OFFER_TRUSTLINE_TX(tlamt, to_address, tknid)           \
    {                                                                          \
        uint8_t *buf_out = NFT_BUY_OFFER_TRUSTLINE;                            \
        UINT32_TO_BUF((buf_out + 20), cur_ledger_seq + 1);                     \
        UINT32_TO_BUF((buf_out + 26), cur_ledger_seq + 5);                     \
        COPY_40BYTES((buf_out + 31), tlamt);                                   \
        COPY_8BYTES((buf_out + 71), (tlamt + 40));                             \
        COPY_32BYTES((buf_out + 80), tknid)                                    \
        COPY_20BYTES((buf_out + 158), hook_accid);                             \
        COPY_20BYTES((buf_out + 180), to_address);                             \
        etxn_details((uint32_t)buf_out + 200, 138);                            \
        int64_t fee = etxn_fee_base(buf_out, NFT_BUY_OFFER_TRUSTLINE_TX_SIZE); \
        uint8_t *fee_ptr = buf_out + 112;                                      \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                          \
    }

#define NFT_OFFER_TX_SIZE \
    sizeof(NFT_OFFER)
#define PREPARE_NFT_BUY_OFFER_TX(drops_amount_raw, to_address, tknid) \
    {                                                                 \
        uint8_t *buf_out = NFT_OFFER;                                 \
        UINT32_TO_BUF((buf_out + 4), tfBuyToken);                     \
        UINT32_TO_BUF((buf_out + 20), cur_ledger_seq + 1);            \
        UINT32_TO_BUF((buf_out + 26), cur_ledger_seq + 5);            \
        uint8_t *buf_ptr = buf_out + 30;                              \
        _06_01_ENCODE_DROPS_AMOUNT(buf_ptr, drops_amount_raw);        \
        COPY_32BYTES((buf_out + 40), tknid)                           \
        COPY_20BYTES((buf_out + 118), hook_accid);                    \
        *(buf_out + 138) = 0x82;                                      \
        COPY_20BYTES((buf_out + 140), to_address);                    \
        etxn_details((uint32_t)buf_out + 160, 138);                   \
        int64_t fee = etxn_fee_base(buf_out, NFT_OFFER_TX_SIZE);      \
        buf_ptr = buf_out + 72;                                       \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(buf_ptr, fee);                 \
    }

#define PREPARE_NFT_SELL_OFFER_TX(drops_amount_raw, to_address, tknid) \
    {                                                                  \
        uint8_t *buf_out = NFT_OFFER;                                  \
        UINT32_TO_BUF((buf_out + 4), tfSellToken);                     \
        UINT32_TO_BUF((buf_out + 20), cur_ledger_seq + 1);             \
        UINT32_TO_BUF((buf_out + 26), cur_ledger_seq + 5);             \
        uint8_t *buf_ptr = buf_out + 30;                               \
        _06_01_ENCODE_DROPS_AMOUNT(buf_ptr, drops_amount_raw);         \
        COPY_32BYTES((buf_out + 40), tknid)                            \
        COPY_20BYTES((buf_out + 118), hook_accid);                     \
        *(buf_out + 138) = 0x83;                                       \
        COPY_20BYTES((buf_out + 140), to_address);                     \
        etxn_details((uint32_t)buf_out + 160, 138);                    \
        int64_t fee = etxn_fee_base(buf_out, NFT_OFFER_TX_SIZE);       \
        buf_ptr = buf_out + 72;                                        \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(buf_ptr, fee);                  \
    }

#endif
