#include "../../lib/hookapi.h"
#include "../../headers/evernode.h"
#include "../../headers/statekeys.h"
#include "../../headers/transactions.h"

// Param Offsets
// <hook_hashes(32*3)><hook_keylets(34*3)><unique_id(32)><short_name(20)>
// PENDING_REWARDS_REQUEST
const uint32_t REWARD_REQ_REF_PARAM_OFFSET = 0;
const uint32_t REWARD_REQ_HOST_PARAM_OFFSET = 32;
const uint32_t REWARD_REQ_AMOUNT_PARAM_OFFSET = 52;

// Domain related clear macros.

#define CLEAR_MOMENT_TRANSIT_INFO(buf) \
    CLEAR_8BYTES(buf);                 \
    CLEAR_2BYTES((buf + 8));           \
    CLEAR_BYTE((buf + 10))

// IOU Payment with single memo (Reward).
uint8_t REWARD_PAYMENT[345] = {
    0x12, 0x00, 0x00,                   // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,       // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,       // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,       // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)><currency_code(20)><issuer(20)>) - Added on prepare to offset 35
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 84
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 95)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 130
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 152
    0xF0, 0x13, // Hook parameter array start marker
    0xE0, 0x17, // Hook parameter object start marker
    0x70,       // Blob start marker
    0x18, 0x20, // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,       // Parameter name
    0x70,                                                                         // Blob start marker
    0x19, 0x0D,                                                                   // Parameter value length 13 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Type (13 bytes) offset 214
    0xE1,                                                                         // Hook parameter object end marker
    0xF1,                                                                         // Hook parameter array end marker
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 229
};

#define REWARD_PAYMENT_TX_SIZE \
    sizeof(REWARD_PAYMENT)
#define PREPARE_REWARD_PAYMENT_TX(evr_amount, to_address)                    \
    {                                                                        \
        uint8_t *buf_out = REWARD_PAYMENT;                                   \
        UINT32_TO_BUF((buf_out + 25), cur_ledger_seq + 1);                   \
        UINT32_TO_BUF((buf_out + 31), cur_ledger_seq + 5);                   \
        SET_AMOUNT_OUT((buf_out + 35), EVR_TOKEN, issuer_accid, evr_amount); \
        COPY_20BYTES((buf_out + 130), hook_accid);                           \
        COPY_20BYTES((buf_out + 152), to_address);                           \
        COPY_8BYTES((buf_out + 214), HOST_REWARD);                           \
        COPY_4BYTES((buf_out + 214 + 8), (HOST_REWARD + 8));                 \
        COPY_BYTE((buf_out + 214 + 12), (HOST_REWARD + 12));                 \
        etxn_details((buf_out + 229), 116);                                  \
        int64_t fee = etxn_fee_base(buf_out, REWARD_PAYMENT_TX_SIZE);        \
        uint8_t *fee_ptr = buf_out + 84;                                     \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                        \
    }

// Simple XRP Payment with single memo.
uint8_t CANDIDATE_STATUS_CHANGE_MIN_PAYMENT_TX[390] = {
    0x12, 0x00, 0x00,                                     // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,                         // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,                         // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,                         // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)>) - Added on prepare to offset 35
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 44
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 55)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 90
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 112
    0xF0, 0x13, // Hook parameter array start marker
    0xE0, 0x17, // Hook parameter object start marker
    0x70,       // Blob start marker
    0x18, 0x20, // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // Parameter name
    0x70,                                                                   // Blob start marker
    0x19, 0x18,                                                             // Parameter value length 24 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, // Event Type (24 bytes) offset 174
    0xE1,                   // Hook parameter object end marker
    0xE0, 0x17,             // Hook parameter object start marker
    0x70,                   // Blob start marker
    0x18, 0x20,             // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // Parameter name
    0x70,                                                                   // Blob start marker
    0x19, 0x21,                                                             // Parameter value length 33 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Data (33 bytes) offset 239
    0xE1,                                                                         // Hook parameter object end marker
    0xF1,                                                                         // Hook parameter array end marker
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 274
};

#define CANDIDATE_STATUS_CHANGE_MIN_PAYMENT_TX_SIZE \
    sizeof(CANDIDATE_STATUS_CHANGE_MIN_PAYMENT_TX)
#define PREPARE_CANDIDATE_STATUS_CHANGE_MIN_PAYMENT(drops_amount, to_address, param_2)     \
    {                                                                                      \
        uint8_t *buf_out = CANDIDATE_STATUS_CHANGE_MIN_PAYMENT_TX;                         \
        uint32_t cls = (uint32_t)ledger_seq();                                             \
        UINT32_TO_BUF((buf_out + 25), cls + 1);                                            \
        UINT32_TO_BUF((buf_out + 31), cls + 5);                                            \
        uint8_t *fee_ptr = (buf_out + 35);                                                 \
        _06_01_ENCODE_DROPS_AMOUNT(fee_ptr, drops_amount);                                 \
        COPY_20BYTES((buf_out + 90), hook_accid);                                          \
        COPY_20BYTES((buf_out + 112), to_address);                                         \
        COPY_16BYTES((buf_out + 174), CANDIDATE_STATUS_CHANGE);                            \
        COPY_8BYTES((buf_out + 174 + 16), (CANDIDATE_STATUS_CHANGE + 16));                 \
        COPY_32BYTES((buf_out + 239), param_2);                                            \
        COPY_BYTE((buf_out + 239 + 32), (param_2 + 32));                                   \
        etxn_details((buf_out + 274), 116);                                                \
        int64_t fee = etxn_fee_base(buf_out, CANDIDATE_STATUS_CHANGE_MIN_PAYMENT_TX_SIZE); \
        fee_ptr = buf_out + 44;                                                            \
        _06_08_ENCODE_DROPS_FEE(fee_ptr, fee);                                             \
    }

// Simple XRP Payment with single memo.
uint8_t FOUNDATION_FUND_REQ_MIN_PAYMENT_TX[312] = {
    0x12, 0x00, 0x00,                                     // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,                         // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,                         // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,                         // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)>) - Added on prepare to offset 35
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 44
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 55)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 90
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 112
    0xF0, 0x13, // Hook parameter array start marker
    0xE0, 0x17, // Hook parameter object start marker
    0x70,       // Blob start marker
    0x18, 0x20, // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,                                                 // Parameter name
    0x70,                                                                                                                   // Blob start marker
    0x19, 0x18,                                                                                                             // Parameter value length 24 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Type (20 bytes) offset 174
    0xE1,                                                                                                                   // Hook parameter object end marker
    0xF1,                                                                                                                   // Hook parameter array end marker
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 196
};

#define FOUNDATION_FUND_REQ_MIN_PAYMENT_TX_SIZE \
    sizeof(FOUNDATION_FUND_REQ_MIN_PAYMENT_TX)
#define PREPARE_FOUNDATION_FUND_REQ_MIN_PAYMENT(drops_amount, to_address)              \
    {                                                                                  \
        uint8_t *buf_out = FOUNDATION_FUND_REQ_MIN_PAYMENT_TX;                         \
        uint32_t cls = (uint32_t)ledger_seq();                                         \
        UINT32_TO_BUF((buf_out + 25), cls + 1);                                        \
        UINT32_TO_BUF((buf_out + 31), cls + 5);                                        \
        uint8_t *fee_ptr = (buf_out + 35);                                             \
        _06_01_ENCODE_DROPS_AMOUNT(fee_ptr, drops_amount);                             \
        COPY_20BYTES((buf_out + 90), hook_accid);                                      \
        COPY_20BYTES((buf_out + 112), to_address);                                     \
        COPY_20BYTES((buf_out + 174), FOUNDATION_FUND_REQ);                            \
        etxn_details((buf_out + 196), 116);                                            \
        int64_t fee = etxn_fee_base(buf_out, FOUNDATION_FUND_REQ_MIN_PAYMENT_TX_SIZE); \
        fee_ptr = buf_out + 44;                                                        \
        _06_08_ENCODE_DROPS_FEE(fee_ptr, fee);                                         \
    }

#define EQUAL_HEARTBEAT(buf, len)      \
    (sizeof(HEARTBEAT) == (len + 1) && \
     BUFFER_EQUAL_8(buf, HEARTBEAT) && \
     BUFFER_EQUAL_4((buf + 8), (HEARTBEAT + 8)))

#define FOREIGN_REF SBUF(NAMESPACE), state_hook_accid, ACCOUNT_ID_SIZE