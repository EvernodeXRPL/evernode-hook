#ifndef REGISTRY_INCLUDED
#define REGISTRY_INCLUDED 1

#include "../../lib/hookapi.h"
#include "../../headers/evernode.h"
#include "../../headers/statekeys.h"
#include "../../headers/transactions.h"

// Param Offsets
// <country_code(2)><cpu_microsec(4)><ram_mb(4)><disk_mb(4)><no_of_total_instances(4)><cpu_model(40)><cpu_count(2)><cpu_speed(2)><description(26)><email_address(40)><host_lease_amount(8,xfl)>
// HOST_REG
const uint32_t HOST_COUNTRY_CODE_PARAM_OFFSET = 0;
const uint32_t HOST_CPU_MICROSEC_PARAM_OFFSET = 2;
const uint32_t HOST_RAM_MB_PARAM_OFFSET = 6;
const uint32_t HOST_DISK_MB_PARAM_OFFSET = 10;
const uint32_t HOST_TOT_INS_COUNT_PARAM_OFFSET = 14;
const uint32_t HOST_CPU_MODEL_NAME_PARAM_OFFSET = 18;
const uint32_t HOST_CPU_COUNT_PARAM_OFFSET = 58;
const uint32_t HOST_CPU_SPEED_PARAM_OFFSET = 60;
const uint32_t HOST_DESCRIPTION_PARAM_OFFSET = 62;
const uint32_t HOST_EMAIL_ADDRESS_PARAM_OFFSET = 88;
const uint32_t HOST_LEASE_AMOUNT_PARAM_OFFSET = 128;

// <token_id(32)><country_code(2)><cpu_microsec(4)><ram_mb(4)><disk_mb(4)><total_instance_count(4)><active_instances(4)><description(26)><version(3)><email(40)><host_lease_amount(8,xfl)>
// HOST_UPDATE_REG
const uint32_t HOST_UPDATE_TOKEN_ID_PARAM_OFFSET = 0;
const uint32_t HOST_UPDATE_COUNTRY_CODE_PARAM_OFFSET = 32;
const uint32_t HOST_UPDATE_CPU_MICROSEC_PARAM_OFFSET = 34;
const uint32_t HOST_UPDATE_RAM_MB_PARAM_OFFSET = 38;
const uint32_t HOST_UPDATE_DISK_MB_PARAM_OFFSET = 42;
const uint32_t HOST_UPDATE_TOT_INS_COUNT_PARAM_OFFSET = 46;
const uint32_t HOST_UPDATE_ACT_INS_COUNT_PARAM_OFFSET = 50;
const uint32_t HOST_UPDATE_DESCRIPTION_PARAM_OFFSET = 54;
const uint32_t HOST_UPDATE_VERSION_PARAM_OFFSET = 80;
const uint32_t HOST_UPDATE_EMAIL_ADDRESS_PARAM_OFFSET = 83;
const uint32_t HOST_UPDATE_LEASE_AMOUNT_PARAM_OFFSET = 123;

// <host_address(20)><host_reputation(1)>
// HOST_UPDATE_REPUTATION
const uint32_t REPUTATION_HOST_ADDRESS_PARAM_OFFSET = 0;
const uint32_t REPUTATION_VALUE_PARAM_OFFSET = 20;

#define FOREIGN_REF SBUF(NAMESPACE), state_hook_accid, ACCOUNT_ID_SIZE

#define FOREIGN_REF_CUSTOM(custom_hook_accid) SBUF(NAMESPACE), custom_hook_accid, ACCOUNT_ID_SIZE

///// Operational macros /////

// Equal operations

#define EQUAL_HOST_REG(buf, len)      \
    (sizeof(HOST_REG) == (len + 1) && \
     BUFFER_EQUAL_8(buf, HOST_REG) && \
     BUFFER_EQUAL_2((buf + 8), (HOST_REG + 8)))

#define EQUAL_HOST_DEREG(buf, len)      \
    (sizeof(HOST_DEREG) == (len + 1) && \
     BUFFER_EQUAL_8(buf, HOST_DEREG) && \
     BUFFER_EQUAL_4((buf + 8), (HOST_DEREG + 8)))

#define EQUAL_HOST_UPDATE_REG(buf, len)      \
    (sizeof(HOST_UPDATE_REG) == (len + 1) && \
     BUFFER_EQUAL_8(buf, HOST_UPDATE_REG) && \
     BUFFER_EQUAL_8((buf + 8), (HOST_UPDATE_REG + 8)))

#define EQUAL_HEARTBEAT(buf, len)      \
    (sizeof(HEARTBEAT) == (len + 1) && \
     BUFFER_EQUAL_8(buf, HEARTBEAT) && \
     BUFFER_EQUAL_4((buf + 8), (HEARTBEAT + 8)))

#define EQUAL_HOST_POST_DEREG(buf, len)      \
    (sizeof(HOST_POST_DEREG) == (len + 1) && \
     BUFFER_EQUAL_8(buf, HOST_POST_DEREG) && \
     BUFFER_EQUAL_8((buf + 8), (HOST_POST_DEREG + 8)))

#define EQUAL_DEAD_HOST_PRUNE(buf, len)      \
    (sizeof(DEAD_HOST_PRUNE) == (len + 1) && \
     BUFFER_EQUAL_8(buf, DEAD_HOST_PRUNE) && \
     BUFFER_EQUAL_8((buf + 8), (DEAD_HOST_PRUNE + 8)))

#define EQUAL_HOST_TRANSFER(buf, len)                  \
    (sizeof(HOST_TRANSFER) == (len + 1) &&             \
     BUFFER_EQUAL_8(buf, HOST_TRANSFER) &&             \
     BUFFER_EQUAL_2((buf + 8), (HOST_TRANSFER + 8)) && \
     BUFFER_EQUAL_1((buf + 10), (HOST_TRANSFER + 10)))

#define EQUAL_HOST_REBATE(buf, len)                  \
    (sizeof(HOST_REBATE) == (len + 1) &&             \
     BUFFER_EQUAL_8(buf, HOST_REBATE) &&             \
     BUFFER_EQUAL_4((buf + 8), (HOST_REBATE + 8)) && \
     BUFFER_EQUAL_1((buf + 12), (HOST_REBATE + 12)))

#define EQUAL_DUD_HOST_REMOVE(buf, len)      \
    (sizeof(DUD_HOST_REMOVE) == (len + 1) && \
     BUFFER_EQUAL_8(buf, DUD_HOST_REMOVE) && \
     BUFFER_EQUAL_8((buf + 8), (DUD_HOST_REMOVE + 8)))

#define EQUAL_HOST_UPDATE_REPUTATION(buf, len)                    \
    (sizeof(HOST_UPDATE_REPUTATION) == (len + 1) &&               \
     BUFFER_EQUAL_8(buf, HOST_UPDATE_REPUTATION) &&               \
     BUFFER_EQUAL_8((buf + 8), (HOST_UPDATE_REPUTATION + 8)) &&   \
     BUFFER_EQUAL_4((buf + 16), (HOST_UPDATE_REPUTATION + 16)) && \
     BUFFER_EQUAL_2((buf + 20), (HOST_UPDATE_REPUTATION + 20)) && \
     BUFFER_EQUAL_1((buf + 22), (HOST_UPDATE_REPUTATION + 22)))

#define EQUAL_FOUNDATION_FUND_REQ(buf, len)      \
    (sizeof(FOUNDATION_FUND_REQ) == (len + 1) && \
     BUFFER_EQUAL_20(buf, FOUNDATION_FUND_REQ))

// Copy operations

#define COPY_DESCRIPTION(lhsbuf, rhsbuf)       \
    COPY_8BYTES(lhsbuf, rhsbuf);               \
    COPY_8BYTES((lhsbuf + 8), (rhsbuf + 8));   \
    COPY_8BYTES((lhsbuf + 16), (rhsbuf + 16)); \
    COPY_2BYTES((lhsbuf + 24), (rhsbuf + 24));

// Empty check

#define IS_VERSION_EMPTY(buf)  \
    (IS_BUFFER_EMPTY_2(buf) && \
     IS_BUFFER_EMPTY_1((buf + 2)))

#define IS_DESCRIPTION_EMPTY(buf) \
    (IS_BUFFER_EMPTY_10(buf) &&   \
     IS_BUFFER_EMPTY_16((buf + 10)))

#define IS_EMAIL_ADDRESS_EMPTY(buf) \
    (IS_BUFFER_EMPTY_32(buf) &&     \
     IS_BUFFER_EMPTY_8((buf + 32)))

// Domain operations

#define GENERATE_URI_TOKEN_ID(token_id, accid, hex_uri)                                          \
    {                                                                                            \
        uint8_t combination[45];                                                                 \
        UINT16_TO_BUF(combination, 85); /* 85 for prefix 'U' */                                  \
        COPY_20BYTES((combination + 2), accid);                                                  \
        /* Copying the 23 Byte long URI */                                                       \
        COPY_20BYTES((combination + 22), hex_uri);                                               \
        COPY_2BYTES((combination + 42), (hex_uri + 20));                                         \
        COPY_BYTE((combination + 44), (hex_uri + 22));                                           \
        /* Write sha512Hash Half of the combination to the token_id */                           \
        if (util_sha512h(SBUF(token_id), SBUF(combination)) < 0)                                 \
            rollback(SBUF("Evernode: Could not generate sha512 Half for the uri token id."), 1); \
    }

/**************************************************************************/
/*************Pre-populated templates of Payment Transactions**************/
/**************************************************************************/

// Simple XRP Payment with single memo (De reg/Prune/Dud Host).
uint8_t REMOVED_HOST_RES_MIN_PAYMENT[384] = {
    0x12, 0x00, 0x00,                                     // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,                         // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,                         // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,                         // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)>) - Added on prepare to offset 35
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 44
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 55)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 90
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 112
    0xF0, 0x13, // Hook parameter array start marker
    0xE0, 0x17, // Hook parameter object start marker
    0x70,       // Blob start marker
    0x18, 0x20, // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,                                           // Parameter name
    0x70,                                                                                                             // Blob start marker
    0x19, 0x13,                                                                                                       // Parameter value length 19 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Type (19 bytes) offset 174
    0xE1,                                                                                                             // Hook parameter object end marker
    0xE0, 0x17,                                                                                                       // Hook parameter object start marker
    0x70,                                                                                                             // Blob start marker
    0x18, 0x20,                                                                                                       // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // Parameter name
    0x70,                                                                   // Blob start marker
    0x19, 0x20,                                                             // Parameter value length 32 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Data (32 bytes) offset 234
    0xE1,                                                                   // Hook parameter object end marker
    0xF1,                                                                   // Hook parameter array end marker
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 268
};

#define REMOVED_HOST_RES_COMMON(buf_out, to_address, param_1, param_2) \
    {                                                                  \
        COPY_20BYTES((buf_out), hook_accid);                           \
        COPY_20BYTES((buf_out + 22), to_address);                      \
        COPY_8BYTES((buf_out + 84), param_1);                          \
        COPY_8BYTES((buf_out + 84 + 8), param_1 + 8);                  \
        COPY_2BYTES((buf_out + 84 + 16), param_1 + 16);                \
        COPY_BYTE((buf_out + 84 + 18), param_1 + 18);                  \
        COPY_32BYTES((buf_out + 144), param_2);                        \
    }

#define REMOVED_HOST_RES_MIN_PAYMENT_TX_SIZE \
    sizeof(REMOVED_HOST_RES_MIN_PAYMENT)
#define PREPARE_REMOVED_HOST_RES_MIN_PAYMENT_TX(drops_amount, to_address, param_1, param_2) \
    {                                                                                       \
        uint8_t *buf_out = REMOVED_HOST_RES_MIN_PAYMENT;                                    \
        UINT32_TO_BUF((buf_out + 25), cur_ledger_seq + 1);                                  \
        UINT32_TO_BUF((buf_out + 31), cur_ledger_seq + 5);                                  \
        uint8_t *buf_ptr = (buf_out + 35);                                                  \
        _06_01_ENCODE_DROPS_AMOUNT(buf_ptr, drops_amount);                                  \
        REMOVED_HOST_RES_COMMON((buf_out + 90), to_address, param_1, param_2);              \
        etxn_details((buf_out + 268), 116);                                                 \
        int64_t fee = etxn_fee_base(buf_out, REMOVED_HOST_RES_MIN_PAYMENT_TX_SIZE);         \
        buf_ptr = buf_out + 44;                                                             \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(buf_ptr, fee);                                       \
    }

// IOU Payment with single memo (De reg/Prune/Dud Host).
uint8_t REMOVED_HOST_RES_PAYMENT[424] = {
    0x12, 0x00, 0x00,                   // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,       // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,       // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,       // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)><currency_code(20)><issuer(20)>) - Added on prepare to offset 35
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee - Added on prepare to offset 84
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 95)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 130
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 152
    0xF0, 0x13, // Hook parameter array start marker
    0xE0, 0x17, // Hook parameter object start marker
    0x70,       // Blob start marker
    0x18, 0x20, // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,                                           // Parameter name
    0x70,                                                                                                             // Blob start marker
    0x19, 0x13,                                                                                                       // Parameter value length 19 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Type (19 bytes) offset 214
    0xE1,                                                                                                             // Hook parameter object end marker
    0xE0, 0x17,                                                                                                       // Hook parameter object start marker
    0x70,                                                                                                             // Blob start marker
    0x18, 0x20,                                                                                                       // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // Parameter name
    0x70,                                                                   // Blob start marker
    0x19, 0x20,                                                             // Parameter value length 32 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Data (32 bytes) offset 274
    0xE1,                                                                   // Hook parameter object end marker
    0xF1,                                                                   // Hook parameter array end marker
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 308
};

#define REMOVED_HOST_RES_PAYMENT_TX_SIZE \
    sizeof(REMOVED_HOST_RES_PAYMENT)
#define PREPARE_REMOVED_HOST_RES_PAYMENT_TX(evr_amount, to_address, param_1, param_2) \
    {                                                                                 \
        uint8_t *buf_out = REMOVED_HOST_RES_PAYMENT;                                  \
        UINT32_TO_BUF((buf_out + 25), cur_ledger_seq + 1);                            \
        UINT32_TO_BUF((buf_out + 31), cur_ledger_seq + 5);                            \
        SET_AMOUNT_OUT((buf_out + 35), EVR_TOKEN, issuer_accid, evr_amount);          \
        REMOVED_HOST_RES_COMMON((buf_out + 130), to_address, param_1, param_2);       \
        etxn_details((buf_out + 308), 116);                                           \
        int64_t fee = etxn_fee_base(buf_out, REMOVED_HOST_RES_PAYMENT_TX_SIZE);       \
        uint8_t *fee_ptr = buf_out + 84;                                              \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                                 \
    }

// Simple xrp payment with single memo (send acquired fund).
uint8_t HEARTBEAT_TRIGGER_MIN_PAYMENT[412] = {
    0x12, 0x00, 0x00,                                     // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,                         // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,                         // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,                         // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)>) - Added on prepare to offset 35
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 44
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 55)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 90
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 112
    0xF0, 0x13, // Hook parameter array start marker
    0xE0, 0x17, // Hook parameter object start marker
    0x70,       // Blob start marker
    0x18, 0x20, // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,                                           // Parameter name
    0x70,                                                                                                             // Blob start marker
    0x19, 0x13,                                                                                                       // Parameter value length 19 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Type (19 bytes) offset 174
    0xE1,                                                                                                             // Hook parameter object end marker
    0xE0, 0x17,                                                                                                       // Hook parameter object start marker
    0x70,                                                                                                             // Blob start marker
    0x18, 0x20,                                                                                                       // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // Parameter name
    0x70,                                                                   // Blob start marker
    0x19, 0x3C,                                                             // Parameter value length 60 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Data (60 bytes) offset 234
    0xE1,                                                                                                                   // Hook parameter object end marker
    0xF1,                                                                                                                   // Hook parameter array end marker
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 296
};

#define HEARTBEAT_TRIGGER_COMMON(buf_out, to_address, param_1, tx_id, reward_req) \
    {                                                                             \
        COPY_20BYTES((buf_out), hook_accid);                                      \
        COPY_20BYTES((buf_out + 22), to_address);                                 \
        COPY_16BYTES((buf_out + 84), param_1);                                    \
        COPY_2BYTES((buf_out + 84 + 16), param_1 + 16);                           \
        COPY_BYTE((buf_out + 84 + 18), param_1 + 18);                             \
        COPY_32BYTES((buf_out + 144), tx_id);                                     \
        COPY_20BYTES((buf_out + 144 + 32), reward_req);                           \
        COPY_8BYTES((buf_out + 144 + 52), reward_req + 20);                       \
    }

#define HEARTBEAT_TRIGGER_MIN_PAYMENT_TX_SIZE \
    sizeof(HEARTBEAT_TRIGGER_MIN_PAYMENT)
#define PREPARE_HEARTBEAT_TRIGGER_MIN_PAYMENT_TX(drops_amount, to_address, param_1, tx_id, reward_req) \
    {                                                                                                  \
        uint8_t *buf_out = HEARTBEAT_TRIGGER_MIN_PAYMENT;                                              \
        UINT32_TO_BUF((buf_out + 25), cur_ledger_seq + 1);                                             \
        UINT32_TO_BUF((buf_out + 31), cur_ledger_seq + 5);                                             \
        uint8_t *buf_ptr = (buf_out + 35);                                                             \
        _06_01_ENCODE_DROPS_AMOUNT(buf_ptr, drops_amount);                                             \
        HEARTBEAT_TRIGGER_COMMON((buf_out + 90), to_address, param_1, tx_id, reward_req);              \
        etxn_details((buf_out + 296), 116);                                                            \
        int64_t fee = etxn_fee_base(buf_out, HEARTBEAT_TRIGGER_MIN_PAYMENT_TX_SIZE);                   \
        buf_ptr = buf_out + 44;                                                                        \
        _06_08_ENCODE_DROPS_FEE(buf_ptr, fee);                                                         \
    }

// IOU Payment with single memo (send acquired fund).
uint8_t HEARTBEAT_TRIGGER_PAYMENT[452] = {
    0x12, 0x00, 0x00,                   // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,       // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,       // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,       // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)><currency_code(20)><issuer(20)>) - Added on prepare to offset 35
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee - Added on prepare to offset 84
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 95)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 130
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 152
    0xF0, 0x13, // Hook parameter array start marker
    0xE0, 0x17, // Hook parameter object start marker
    0x70,       // Blob start marker
    0x18, 0x20, // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,                                           // Parameter name
    0x70,                                                                                                             // Blob start marker
    0x19, 0x13,                                                                                                       // Parameter value length 19 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Type (19 bytes) offset 214
    0xE1,                                                                                                             // Hook parameter object end marker
    0xE0, 0x17,                                                                                                       // Hook parameter object start marker
    0x70,                                                                                                             // Blob start marker
    0x18, 0x20,                                                                                                       // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // Parameter name
    0x70,                                                                   // Blob start marker
    0x19, 0x3C,                                                             // Parameter value length 60 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Data (60 bytes) offset 274
    0xE1,                                                                                                                   // Hook parameter object end marker
    0xF1,                                                                                                                   // Hook parameter array end marker
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 336
};

#define HEARTBEAT_TRIGGER_PAYMENT_TX_SIZE \
    sizeof(HEARTBEAT_TRIGGER_PAYMENT)
#define PREPARE_HEARTBEAT_TRIGGER_PAYMENT_TX(evr_amount, to_address, param_1, tx_id, reward_req) \
    {                                                                                            \
        uint8_t *buf_out = HEARTBEAT_TRIGGER_PAYMENT;                                            \
        UINT32_TO_BUF((buf_out + 25), cur_ledger_seq + 1);                                       \
        UINT32_TO_BUF((buf_out + 31), cur_ledger_seq + 5);                                       \
        SET_AMOUNT_OUT((buf_out + 35), EVR_TOKEN, issuer_accid, evr_amount);                     \
        COPY_20BYTES((buf_out + 130), hook_accid);                                               \
        COPY_20BYTES((buf_out + 152), to_address);                                               \
        HEARTBEAT_TRIGGER_COMMON((buf_out + 130), to_address, param_1, tx_id, reward_req);       \
        etxn_details((buf_out + 336), 116);                                                      \
        int64_t fee = etxn_fee_base(buf_out, HEARTBEAT_TRIGGER_PAYMENT_TX_SIZE);                 \
        uint8_t *fee_ptr = buf_out + 84;                                                         \
        _06_08_ENCODE_DROPS_FEE(fee_ptr, fee);                                                   \
    }

/************************************************************************************/
/*************Pre-populated templates of URI token related Transactions**************/
/************************************************************************************/

// Mint URI Token
uint8_t REG_URI_TOKEN_MINT_TX[232] = {
    0x12, 0x00, 0x2D,                                     // transaction_type(ttURITokenMint)
    0x22, 0x00, 0x00, 0x00, 0x01,                         // Flags(tfBurnable)
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 15
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 21
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee - Added on prepare to offset 25
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // signing pubkey(NULL)
    0x75, 0x17, 0x65, 0x76, 0x72, 0x68, 0x6F, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, // uri(length 23, evrhost<tx_ide_ref>) - txid Added on prepare to offset 78
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account - Added on prepare to offset 96
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116 bytes) - Added on prepare to offset 116
};

#define REG_URI_TOKEN_MINT_TX_SIZE \
    sizeof(REG_URI_TOKEN_MINT_TX)
#define PREPARE_URI_TOKEN_MINT_TX(txid_ref_ptr)                           \
    {                                                                     \
        uint8_t *buf_out = REG_URI_TOKEN_MINT_TX;                         \
        UINT32_TO_BUF((buf_out + 15), cur_ledger_seq + 1);                \
        UINT32_TO_BUF((buf_out + 21), cur_ledger_seq + 5);                \
        COPY_16BYTES((buf_out + 78), txid_ref_ptr);                       \
        COPY_20BYTES((buf_out + 96), hook_accid);                         \
        etxn_details((buf_out + 116), 116);                               \
        int64_t fee = etxn_fee_base(buf_out, REG_URI_TOKEN_MINT_TX_SIZE); \
        uint8_t *fee_ptr = buf_out + 25;                                  \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                     \
    }

// Burn URI Token
uint8_t URI_TOKEN_BURN_TX[236] = {
    0x12, 0x00, 0x2E,                   // transaction_type(ttURITokenBurn)
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 10
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 16
    0x50, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // URITokenID - Added on prepare to offset 22
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                               // fee - Added on prepare to offset 54
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // signing pubkey(NULL)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account - Added on prepare to offset 100
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 120
};

#define URI_TOKEN_BURN_TX_SIZE \
    sizeof(URI_TOKEN_BURN_TX)
#define PREPARE_URI_TOKEN_BURN_TX(tknid)                              \
    {                                                                 \
        uint8_t *buf_out = URI_TOKEN_BURN_TX;                         \
        UINT32_TO_BUF((buf_out + 10), cur_ledger_seq + 1);            \
        UINT32_TO_BUF((buf_out + 16), cur_ledger_seq + 5);            \
        COPY_32BYTES((buf_out + 22), tknid);                          \
        COPY_20BYTES((buf_out + 100), hook_accid);                    \
        etxn_details((buf_out + 120), 116);                           \
        int64_t fee = etxn_fee_base(buf_out, URI_TOKEN_BURN_TX_SIZE); \
        uint8_t *fee_ptr = buf_out + 54;                              \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                 \
    }

// URI Token Sell Offer
uint8_t URI_TOKEN_SELL_OFFER[267] = {
    0x12, 0x00, 0x30,                   // transaction_type(ttUriTokenSellOffer)
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 10
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 16
    0x50, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // URITokenID - Added on prepare to offset 22
    0x61, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                               // amount(<type(1)><amount(8)>) - Added on prepare to offset 54
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                               // fee - Added on prepare to offset 63
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // signing pubkey(NULL)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 109
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 131
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 151
};

#define URI_TOKEN_SELL_OFFER_TX_SIZE \
    sizeof(URI_TOKEN_SELL_OFFER)

#define PREPARE_URI_TOKEN_SELL_OFFER_TX(drops_amount_raw, to_address, tknid) \
    {                                                                        \
        uint8_t *buf_out = URI_TOKEN_SELL_OFFER;                             \
        UINT32_TO_BUF((buf_out + 10), cur_ledger_seq + 1);                   \
        UINT32_TO_BUF((buf_out + 16), cur_ledger_seq + 5);                   \
        COPY_32BYTES((buf_out + 22), tknid);                                 \
        uint8_t *buf_ptr = (buf_out + 54);                                   \
        _06_01_ENCODE_DROPS_AMOUNT(buf_ptr, drops_amount_raw);               \
        COPY_20BYTES((buf_out + 109), hook_accid);                           \
        COPY_20BYTES((buf_out + 131), to_address);                           \
        etxn_details((uint32_t)buf_out + 151, 116);                          \
        int64_t fee = etxn_fee_base(buf_out, URI_TOKEN_SELL_OFFER_TX_SIZE);  \
        uint8_t *fee_ptr = buf_out + 63;                                     \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                        \
    }

// Buy URI Token
uint8_t URI_TOKEN_BUY_TX[245] = {
    0x12, 0x00, 0x2F,                   // transaction_type(ttURITokenBuy)
    0x24, 0x00, 0x00, 0x00, 0x00,       // sequence(0)
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00, // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 10
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00, // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 16
    0x50, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // URITokenID - Added on prepare to offset 22
    0x61, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                               // amount(<type(1)><amount(8)>) - Added on prepare to offset 54
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                               // fee - Added on prepare to offset 63
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // signing pubkey(NULL)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account - Added on prepare to offset 109
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 129
};

#define URI_TOKEN_BUY_TX_SIZE \
    sizeof(URI_TOKEN_BUY_TX)
#define PREPARE_URI_TOKEN_BUY_TX(drops_amount_raw, tknid)            \
    {                                                                \
        uint8_t *buf_out = URI_TOKEN_BUY_TX;                         \
        UINT32_TO_BUF((buf_out + 10), cur_ledger_seq + 1);           \
        UINT32_TO_BUF((buf_out + 16), cur_ledger_seq + 5);           \
        COPY_32BYTES((buf_out + 22), tknid);                         \
        uint8_t *buf_ptr = (buf_out + 54);                           \
        _06_01_ENCODE_DROPS_AMOUNT(buf_ptr, drops_amount_raw);       \
        COPY_20BYTES((buf_out + 109), hook_accid);                   \
        etxn_details((buf_out + 129), 116);                          \
        int64_t fee = etxn_fee_base(buf_out, URI_TOKEN_BUY_TX_SIZE); \
        uint8_t *fee_ptr = buf_out + 63;                             \
        CHECK_AND_ENCODE_FINAL_TRX_FEE(fee_ptr, fee);                \
    }

// Simple XRP Payment with single memo (To inform governor about cascade candidate removal).
uint8_t REMOVE_CASCADE_CANDIDATE_MIN_PAYMENT[390] = {
    0x12, 0x00, 0x00,                                     // transaction_type(ttPAYMENT)
    0x22, 0x80, 0x00, 0x00, 0x00,                         // flags(tfCANONICAL)
    0x23, 0x00, 0x00, 0x00, 0x00,                         // TAG_SOURCE
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x2E, 0x00, 0x00, 0x00, 0x00,                         // TAG DESTINATION
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 25
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 31
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // amount(<type(1)><amount(8)>) - Added on prepare to offset 35
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 44
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Signing Public Key (NULL offset 55)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 90
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 112
    0xF0, 0x13, // Hook parameter array start marker
    0xE0, 0x17, // Hook parameter object start marker
    0x70,       // Blob start marker
    0x18, 0x20, // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,                                                                         // Parameter name
    0x70,                                                                                                                                           // Blob start marker
    0x19, 0x18,                                                                                                                                     // Parameter value length 24 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Type (24 bytes) offset 174
    0xE1,                                                                                                                                           // Hook parameter object end marker
    0xE0, 0x17,                                                                                                                                     // Hook parameter object start marker
    0x70,                                                                                                                                           // Blob start marker
    0x18, 0x20,                                                                                                                                     // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // Parameter name
    0x70,                                                                   // Blob start marker
    0x19, 0x21,                                                             // Parameter value length 32 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Data (33 bytes) offset 236
    0xE1,                                                                         // Hook parameter object end marker
    0xF1,                                                                         // Hook parameter array end marker
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 274
};

#define REMOVE_CASCADE_CANDIDATE_MIN_PAYMENT_SIZE \
    sizeof(REMOVE_CASCADE_CANDIDATE_MIN_PAYMENT)
#define PREPARE_REMOVE_CASCADE_CANDIDATE_MIN_PAYMENT(drops_amount, to_address, event_type, event_data)                   \
    {                                                                                                                    \
        uint8_t *buf_out = REMOVE_CASCADE_CANDIDATE_MIN_PAYMENT;                                                         \
        UINT32_TO_BUF((buf_out + 25), cur_ledger_seq + 1);                                                               \
        UINT32_TO_BUF((buf_out + 31), cur_ledger_seq + 5);                                                               \
        uint8_t *buf_ptr = (buf_out + 35);                                                                               \
        _06_01_ENCODE_DROPS_AMOUNT(buf_ptr, drops_amount);                                                               \
        COPY_20BYTES((buf_out + 90), hook_accid);                                                                        \
        COPY_20BYTES((buf_out + 112), to_address);                                                                       \
        COPY_8BYTES((buf_out + 174), event_type);                                                                        \
        COPY_8BYTES((buf_out + 174 + 8), (event_type + 8));                                                              \
        COPY_8BYTES((buf_out + 174 + 16), (event_type + 16));                                                            \
        COPY_32BYTES((buf_out + 239), event_data);                                                                       \
        COPY_BYTE((buf_out + 239 + 32), (event_data + 32));                                                              \
        etxn_details((buf_out + 274), 116);                                                                              \
        int64_t fee = etxn_fee_base(buf_out, REMOVE_CASCADE_CANDIDATE_MIN_PAYMENT_SIZE);                                 \
        buf_ptr = buf_out + 44;                                                                                          \
        _06_08_ENCODE_DROPS_FEE(buf_ptr, fee); /** Skip the fee check since this tx is sent to governor/registry hook.*/ \
    }

#define CAST_4BYTES_TO_HEXSTR(hexstr_ptr, byte_ptr)                                                       \
    {                                                                                                     \
        char hexmap[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}; \
        hexstr_ptr[0] = hexmap[(byte_ptr[0] & 0xF0) >> 4];                                                \
        hexstr_ptr[1] = hexmap[byte_ptr[0] & 0x0F];                                                       \
        hexstr_ptr[2] = hexmap[(byte_ptr[1] & 0xF0) >> 4];                                                \
        hexstr_ptr[3] = hexmap[byte_ptr[1] & 0x0F];                                                       \
        hexstr_ptr[4] = hexmap[(byte_ptr[2] & 0xF0) >> 4];                                                \
        hexstr_ptr[5] = hexmap[byte_ptr[2] & 0x0F];                                                       \
        hexstr_ptr[6] = hexmap[(byte_ptr[3] & 0xF0) >> 4];                                                \
        hexstr_ptr[7] = hexmap[byte_ptr[3] & 0x0F];                                                       \
    }

// Simple Invoke Txn
uint8_t REPUTATION_HOOK_INVOKE[353] = {
    0x12, 0x00, 0x63,                                     // transaction_type(ttInvoke)
    0x24, 0x00, 0x00, 0x00, 0x00,                         // sequence(0)
    0x20, 0x1A, 0x00, 0x00, 0x00, 0x00,                   // first_ledger_sequence(ledger_seq + 1) - Added on prepare to offset 10
    0x20, 0x1B, 0x00, 0x00, 0x00, 0x00,                   // last_ledger_sequence(ledger_seq + 5) - Added on prepare to offset 16
    0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // fee Added on prepare to offset 20
    0x73, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // signing pubkey(NULL)
    0x81, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_source(20) - Added on prepare to offset 66
    0x83, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, // account_destination(20) - Added on prepare to offset 88
    0xF0, 0x13, // Hook parameter array start marker
    0xE0, 0x17, // Hook parameter object start marker
    0x70,       // Blob start marker
    0x18, 0x20, // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // Parameter name
    0x70,                                                                   // Blob start marker
    0x19, 0x18,                                                             // Parameter value length 24 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, // Event Data (24 bytes)
    0xE1,                   // Hook parameter object end marker
    0xE0, 0x17,             // Hook parameter object start marker
    0x70,                   // Blob start marker
    0x18, 0x20,             // Parameter name length 32 bytes
    0x45, 0x56, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,                                                 // Parameter name
    0x70,                                                                                                                   // Blob start marker
    0x19, 0x14,                                                                                                             // Parameter value length 20 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Event Data (20 bytes)
    0xE1,                                                                                                                   // Hook parameter object end marker
    0xF1,                                                                                                                   // Hook parameter array end marker
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // emit_details(116) - Added on prepare to offset 202
};

#define REPUTATION_HOOK_INVOKE_SIZE \
    sizeof(REPUTATION_HOOK_INVOKE)
#define PREPARE_REPUTATION_HOOK_INVOKE(to_address, event_type, event_data)                                               \
    {                                                                                                                    \
        uint8_t *buf_out = REPUTATION_HOOK_INVOKE;                                                                       \
        UINT32_TO_BUF((buf_out + 10), cur_ledger_seq + 1);                                                               \
        UINT32_TO_BUF((buf_out + 16), cur_ledger_seq + 5);                                                               \
        COPY_20BYTES((buf_out + 66), hook_accid);                                                                        \
        COPY_20BYTES((buf_out + 88), to_address);                                                                        \
        COPY_20BYTES((buf_out + 150), event_type);                                                                       \
        COPY_4BYTES((buf_out + 170), (event_type + 20));                                                                 \
        COPY_20BYTES((buf_out + 215), event_data);                                                                       \
        etxn_details((buf_out + 237), 116);                                                                              \
        int64_t fee = etxn_fee_base(buf_out, REPUTATION_HOOK_INVOKE_SIZE);                                               \
        uint8_t *buf_ptr = (buf_out + 20);                                                                               \
        _06_08_ENCODE_DROPS_FEE(buf_ptr, fee); /** Skip the fee check since this tx is sent to governor/registry hook.*/ \
    }
#endif
